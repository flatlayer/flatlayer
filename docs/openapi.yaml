openapi: 3.1.0
info:
  title: Flatlayer CMS API
  description: |
    API documentation for Flatlayer CMS, a Git-based headless CMS with AI-powered search capabilities.

    Key features:
    - Content management through Git repositories
    - Advanced filtering and querying
    - AI-powered vector search
    - Image transformation and optimization
    - Hierarchical content navigation
  version: '1.0.0'
  contact:
    name: Flatlayer Team
    url: https://flatlayer.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.flatlayer.io/v1
    description: Production server
  - url: http://localhost:8000
    description: Local development server

tags:
  - name: Health
    description: Health check endpoints
  - name: Entries
    description: Operations for managing content entries
  - name: Images
    description: Operations for image transformation and metadata
  - name: Hierarchy
    description: Operations for hierarchical content navigation
  - name: Webhooks
    description: Webhook endpoints for content synchronization

paths:
  /:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  version:
                    type: string
                    example: "1.0"

  /entries/{type}/list:
    get:
      tags:
        - Entries
      summary: List entries
      description: Retrieve a paginated list of entries with optional filtering and field selection
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Content type (e.g., 'post', 'doc')
        - name: filter
          in: query
          schema:
            type: string
            format: json
          description: JSON filter criteria for querying entries
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: JSON array of fields to include in the response
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
          description: Number of items per page
      responses:
        '200':
          description: Successfully retrieved entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryListResponse'
        '404':
          description: Content type not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /entries/{type}/show/{path}:
    get:
      tags:
        - Entries
      summary: Get single entry
      description: Retrieve a specific entry by its type and path
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Content type (e.g., 'post', 'doc')
        - name: path
          in: path
          required: false
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\-_/]*$'
          description: Entry path (optional, returns root entry if omitted)
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: JSON array of fields to include
        - name: includes
          in: query
          schema:
            type: string
          description: Comma-separated list of additional data to include (hierarchy,sequence,timeline)
        - name: navigation_fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in navigation entries
      responses:
        '200':
          description: Successfully retrieved entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryDetail'
        '404':
          description: Entry not found

  /entries/{type}/batch:
    get:
      tags:
        - Entries
      summary: Batch retrieve entries
      description: Retrieve multiple entries of the same type in a single request
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Content type (e.g., 'post', 'doc')
        - name: slugs
          in: query
          required: true
          schema:
            type: string
          description: Comma-separated list of entry slugs
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: JSON array of fields to include
      responses:
        '200':
          description: Successfully retrieved entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entry'
        '404':
          description: One or more entries not found

  /entries/{type}/hierarchy:
    get:
      tags:
        - Hierarchy
      summary: Get content hierarchy
      description: Retrieve the hierarchical structure of content
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Content type (e.g., 'post', 'doc')
        - name: root
          in: query
          schema:
            type: string
          description: Root path to start hierarchy from
        - name: depth
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 10
          description: Maximum depth of hierarchy to retrieve
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in root node and similar-level nodes
        - name: navigation_fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in child nodes and deeper levels
        - name: sort
          in: query
          schema:
            type: string
            format: json
          description: Sorting criteria for hierarchy nodes
      responses:
        '200':
          description: Successfully retrieved hierarchy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyResponse'
        '404':
          description: Content type not found

  /images/{id}.{extension}:
    get:
      tags:
        - Images
      summary: Transform image
      description: Transform and optimize an image
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Image ID
        - name: extension
          in: path
          required: true
          schema:
            type: string
            enum: [jpg, jpeg, png, webp, gif]
          description: Desired output format
        - name: w
          in: query
          schema:
            type: integer
            minimum: 1
          description: Desired width in pixels
        - name: h
          in: query
          schema:
            type: integer
            minimum: 1
          description: Desired height in pixels
        - name: q
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 90
          description: JPEG/WebP quality (1-100)
      responses:
        '200':
          description: Successfully transformed image
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid transformation parameters
        '404':
          description: Image not found

  /images/{id}/metadata:
    get:
      tags:
        - Images
      summary: Get image metadata
      description: Retrieve metadata for an image
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Image ID
      responses:
        '200':
          description: Successfully retrieved metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageMetadata'
        '404':
          description: Image not found

  /webhooks/{type}:
    post:
      tags:
        - Webhooks
      summary: Handle content webhook
      description: |
        Handle GitHub webhook notifications for content updates. The webhook should be configured
        with a secret key that matches the one configured in the CMS. The payload is validated
        using the X-Hub-Signature-256 header.
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Content type identifier (e.g., 'post', 'doc')
        - name: X-Hub-Signature-256
          in: header
          required: true
          schema:
            type: string
          description: |
            GitHub webhook signature. The signature is a SHA-256 HMAC hex digest of the
            raw request body, using the webhook secret as the key.
            Format: sha256=<hex_digest>
          example: "sha256=c35828b08aa5d8c2d9e48c1abd0a2dedfe4404ad71e03d3f4cfa14910ff24ad3"
      responses:
        '202':
          description: Webhook received and sync initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sync initiated"
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Entry:
      type: object
      description: |
        Represents a content entry in the CMS. Fields can be selected using the `fields` parameter
        in various endpoints. Some fields are computed and only available when specifically requested.
      properties:
        id:
          type: integer
          description: Unique identifier for the entry
        type:
          type: string
          description: Content type identifier (e.g., 'post', 'doc')
          example: "post"
        title:
          type: string
          description: Entry title
          example: "Getting Started with Flatlayer"
        slug:
          type: string
          description: URL-friendly identifier, often representing the path
          example: "docs/getting-started"
        content:
          type: string
          description: Main content in Markdown format
          example: "# Getting Started\n\nWelcome to Flatlayer..."
        excerpt:
          type: string
          description: Short summary or preview of the content
          example: "A quick introduction to Flatlayer CMS"
        published_at:
          type: string
          format: date-time
          description: Publication date and time
          example: "2024-01-01T10:00:00Z"
        is_index:
          type: boolean
          description: Indicates if this is an index file (e.g., index.md)
          example: true
        meta:
          type: object
          description: Custom metadata fields
          additionalProperties: true
          example:
            author: "John Doe"
            category: "tutorials"
            nav_order: 1
        tags:
          type: array
          description: Array of tag names associated with the entry
          items:
            type: string
          example: ["tutorial", "beginner", "installation"]
        images:
          type: object
          description: Images grouped by collection
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Image'

    EntryListResponse:
      type: object
      description: Paginated list of entries
      properties:
        data:
          type: array
          description: Array of entries matching the query
          items:
            $ref: '#/components/schemas/Entry'
        pagination:
          type: object
          description: Pagination information
          properties:
            current_page:
              type: integer
              example: 1
            total_pages:
              type: integer
              example: 5
            per_page:
              type: integer
              example: 15

    EntryDetail:
      allOf:
        - $ref: '#/components/schemas/Entry'
        - type: object
          properties:
            hierarchy:
              $ref: '#/components/schemas/HierarchyInfo'
            sequence:
              $ref: '#/components/schemas/NavigationInfo'
            timeline:
              $ref: '#/components/schemas/NavigationInfo'

    Image:
      type: object
      description: Represents an image associated with an entry
      properties:
        id:
          type: integer
        extension:
          type: string
          example: "jpg"
        filename:
          type: string
          example: "featured.jpg"
        width:
          type: integer
          example: 1200
        height:
          type: integer
          example: 630
        thumbhash:
          type: string
          example: "1QcSHQRnh493V4dIh4eXh1h4"
        meta:
          type: object
          additionalProperties: true

    ImageMetadata:
      type: object
      description: Extended metadata for an image
      properties:
        width:
          type: integer
          example: 1200
        height:
          type: integer
          example: 630
        mime_type:
          type: string
          example: "image/jpeg"
        size:
          type: integer
          example: 123456
        filename:
          type: string
          example: "featured.jpg"
        thumbhash:
          type: string
          example: "1QcSHQRnh493V4dIh4eXh1h4"

    HierarchyResponse:
      type: object
      description: Response containing hierarchical content structure
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/HierarchyNode'
        meta:
          type: object
          properties:
            type:
              type: string
              example: "doc"
            root:
              type: string
              example: "docs/getting-started"
            depth:
              type: integer
              example: 3
            total_nodes:
              type: integer
              example: 12

    HierarchyNode:
      type: object
      description: A node in the content hierarchy
      properties:
        id:
          type: integer
        title:
          type: string
          example: "Getting Started"
        slug:
          type: string
          example: "docs/getting-started"
        meta:
          type: object
          additionalProperties: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/HierarchyNode'

    HierarchyInfo:
      type: object
      properties:
        ancestors:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        siblings:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        parent:
          $ref: '#/components/schemas/Entry'

    NavigationInfo:
      type: object
      description: Sequential navigation information
      properties:
        previous:
          $ref: '#/components/schemas/Entry'
          description: Previous entry in sequence
        next:
          $ref: '#/components/schemas/Entry'
          description: Next entry in sequence
        position:
          type: object
          description: Position information
          properties:
            current:
              type: integer
              description: Current position in sequence
              example: 2
            total:
              type: integer
              description: Total number of items in sequence
              example: 5

      Error:
        type: object
        description: Error response
        properties:
          error:
            type: string
            description: Error message
            example: "Entry not found"
