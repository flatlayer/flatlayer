openapi: 3.1.0
info:
  title: Flatlayer CMS API
  description: |
    API documentation for Flatlayer CMS, a Git-based headless CMS with AI-powered search capabilities.

    Key features:
    - Content management through Git repositories
    - Advanced filtering and querying
    - AI-powered vector search
    - Image transformation and optimization
    - Hierarchical content navigation
  version: '1.0.0'
  contact:
    name: Flatlayer Team
    url: https://flatlayer.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.flatlayer.io/v1
    description: Production server
  - url: http://localhost:8000
    description: Local development server

tags:
  - name: Entries
    description: Operations for managing content entries
  - name: Images
    description: Operations for image transformation and metadata
  - name: Hierarchy
    description: Operations for hierarchical content navigation
  - name: Webhooks
    description: Webhook endpoints for content synchronization

paths:
  /entry/{type}:
    get:
      tags:
        - Entries
      summary: List entries of a specific type
      description: Retrieve a paginated list of entries with optional filtering and field selection
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Content type (e.g., 'post', 'doc')
        - name: filter
          in: query
          schema:
            type: string
            format: json
          description: JSON filter criteria for querying entries
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: JSON array of fields to include in the response
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
          description: Number of items per page
      responses:
        '200':
          description: Successfully retrieved entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryListResponse'
        '404':
          description: Content type not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /entry/{type}/{slug}:
    get:
      tags:
        - Entries
      summary: Get a single entry
      description: Retrieve a specific entry by its type and slug
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: JSON array of fields to include
        - name: includes
          in: query
          schema:
            type: string
          description: Comma-separated list of additional data to include (hierarchy,sequence,timeline)
        - name: navigation_fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in navigation entries
      responses:
        '200':
          description: Successfully retrieved entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryDetail'
        '404':
          description: Entry not found

  /entry/batch/{type}:
    get:
      tags:
        - Entries
      summary: Batch retrieve entries
      description: Retrieve multiple entries of the same type in a single request
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: slugs
          in: query
          required: true
          schema:
            type: string
          description: Comma-separated list of entry slugs
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: JSON array of fields to include
      responses:
        '200':
          description: Successfully retrieved entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entry'
        '404':
          description: One or more entries not found

  /hierarchy/{type}:
    get:
      tags:
        - Hierarchy
      summary: Get content hierarchy
      description: Retrieve the hierarchical structure of content
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: root
          in: query
          schema:
            type: string
          description: Root path to start hierarchy from
        - name: depth
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 10
          description: Maximum depth of hierarchy to retrieve
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in root node and similar-level nodes
        - name: navigation_fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in child nodes and deeper levels
        - name: sort
          in: query
          schema:
            type: string
            format: json
          description: Sorting criteria for hierarchy nodes
      responses:
        '200':
          description: Successfully retrieved hierarchy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyResponse'
        '404':
          description: Content type not found

  /hierarchy/{type}/{path}:
    get:
      tags:
        - Hierarchy
      summary: Find node in hierarchy
      description: Find a specific node and its ancestry in the content hierarchy
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in root node and similar-level nodes
        - name: navigation_fields
          in: query
          schema:
            type: string
            format: json
          description: Fields to include in child nodes and deeper levels
      responses:
        '200':
          description: Successfully found node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyNode'
        '404':
          description: Node not found

  /image/{id}.{extension}:
    get:
      tags:
        - Images
      summary: Transform image
      description: Transform and optimize an image
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: extension
          in: path
          required: true
          schema:
            type: string
            enum: [jpg, jpeg, png, webp, gif]
        - name: w
          in: query
          schema:
            type: integer
            minimum: 1
          description: Desired width in pixels
        - name: h
          in: query
          schema:
            type: integer
            minimum: 1
          description: Desired height in pixels
        - name: q
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 90
          description: JPEG/WebP quality (1-100)
      responses:
        '200':
          description: Successfully transformed image
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid transformation parameters
        '404':
          description: Image not found

  /image/{id}/metadata:
    get:
      tags:
        - Images
      summary: Get image metadata
      description: Retrieve metadata for an image
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageMetadata'
        '404':
          description: Image not found

  /webhook/{type}:
    post:
      tags:
        - Webhooks
      summary: Handle content webhook
      description: |
        Handle GitHub webhook notifications for content updates. The webhook should be configured
        with a secret key that matches the one configured in the CMS. The payload is validated
        using the X-Hub-Signature-256 header.
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Content type identifier (e.g., 'post', 'doc')
        - name: X-Hub-Signature-256
          in: header
          required: true
          schema:
            type: string
          description: |
            GitHub webhook signature. The signature is a SHA-256 HMAC hex digest of the
            raw request body, using the webhook secret as the key.
            Format: sha256=<hex_digest>
          example: "sha256=c35828b08aa5d8c2d9e48c1abd0a2dedfe4404ad71e03d3f4cfa14910ff24ad3"
      requestBody:
        description: GitHub webhook payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPayload'
      responses:
        '202':
          description: Webhook received and sync initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sync initiated"
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Entry:
      type: object
      description: |
        Represents a content entry in the CMS. Fields can be selected using the `fields` parameter
        in various endpoints. Some fields are computed and only available when specifically requested.
      properties:
        # Basic Fields
        id:
          type: integer
          description: Unique identifier for the entry
        type:
          type: string
          description: Content type identifier (e.g., 'post', 'doc')
          example: "post"
        title:
          type: string
          description: Entry title
          example: "Getting Started with Flatlayer"
        slug:
          type: string
          description: URL-friendly identifier, often representing the path
          example: "docs/getting-started"
        content:
          type: string
          description: Main content in Markdown format
          example: "# Getting Started\n\nWelcome to Flatlayer..."
        excerpt:
          type: string
          description: Short summary or preview of the content
          example: "A quick introduction to Flatlayer CMS"
        published_at:
          type: string
          format: date-time
          description: Publication date and time
          example: "2024-01-01T10:00:00Z"

        # Computed Fields
        is_index:
          type: boolean
          description: Indicates if this is an index file (e.g., index.md)
          example: true
        content_structure:
          type: array
          description: Hierarchical representation of content headings and their positions
          items:
            $ref: '#/components/schemas/ContentStructureItem'
        flat_content_structure:
          type: array
          description: |
            Flattened version of content_structure where each heading includes a
            reference to its parent heading via parent_anchor
          items:
            $ref: '#/components/schemas/FlatContentStructureItem'

        # Relationship Fields
        meta:
          type: object
          description: |
            Custom metadata fields. Can be accessed using dot notation in fields parameter
            (e.g., "meta.author", "meta.category")
          additionalProperties: true
          example:
            author: "John Doe"
            category: "tutorials"
            nav_order: 1
            reading_time: 5
            difficulty: "beginner"
        tags:
          type: array
          description: Array of tag names associated with the entry
          items:
            type: string
          example: [ "tutorial", "beginner", "installation" ]
        images:
          type: object
          description: |
            Images grouped by collection. Each collection (e.g., "featured", "gallery")
            contains an array of image objects.
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Image'
          example:
            featured:
              - id: 1
                filename: "featured.jpg"
                width: 1200
                height: 630
            gallery:
              - id: 2
                filename: "gallery-1.jpg"
                width: 800
                height: 600

    ContentStructureItem:
      type: object
      description: Represents a single heading in the content structure
      properties:
        title:
          type: string
          description: Heading text
          example: "Installation"
        level:
          type: integer
          description: Heading level (1-6)
          example: 2
        anchor:
          type: string
          description: Generated anchor ID for the heading
          example: "installation"
        position:
          type: object
          properties:
            line:
              type: integer
              description: Line number where the heading appears
              example: 15
            offset:
              type: integer
              description: Character offset in the content
              example: 450
        children:
          type: array
          description: Nested headings under this one
          items:
            $ref: '#/components/schemas/ContentStructureItem'

    FlatContentStructureItem:
      type: object
      description: A flattened representation of a heading in the content
      properties:
        title:
          type: string
          example: "Configuration Options"
        level:
          type: integer
          example: 3
        anchor:
          type: string
          example: "configuration-options"
        parent_anchor:
          type: string
          description: Anchor ID of the parent heading
          example: "configuration"
        position:
          type: object
          properties:
            line:
              type: integer
              example: 25
            offset:
              type: integer
              example: 750

    EntryDetail:
      description: Extended entry data including navigation information
      allOf:
        - $ref: '#/components/schemas/Entry'
        - type: object
          properties:
            hierarchy:
              $ref: '#/components/schemas/HierarchyInfo'
              description: Hierarchical navigation information
            sequence:
              $ref: '#/components/schemas/NavigationInfo'
              description: Sequential navigation based on content structure
            timeline:
              $ref: '#/components/schemas/NavigationInfo'
              description: Chronological navigation based on publication dates

    EntryListResponse:
      type: object
      description: Paginated list of entries
      properties:
        data:
          type: array
          description: Array of entries matching the query
          items:
            $ref: '#/components/schemas/Entry'
        pagination:
          type: object
          description: Pagination information
          properties:
            current_page:
              type: integer
              description: Current page number
              example: 1
            total_pages:
              type: integer
              description: Total number of available pages
              example: 5
            per_page:
              type: integer
              description: Number of items per page
              example: 15

    Image:
      type: object
      description: Represents an image associated with an entry
      properties:
        id:
          type: integer
          description: Unique identifier for the image
        extension:
          type: string
          description: File extension (e.g., 'jpg', 'png')
          example: "jpg"
        filename:
          type: string
          description: Original filename
          example: "featured.jpg"
        width:
          type: integer
          description: Image width in pixels
          example: 1200
        height:
          type: integer
          description: Image height in pixels
          example: 630
        thumbhash:
          type: string
          description: Compact image preview hash
          example: "1QcSHQRnh493V4dIh4eXh1h4"
        meta:
          type: object
          description: Additional image metadata
          additionalProperties: true
          example:
            alt: "Feature preview image"
            caption: "Dashboard overview"

    ImageMetadata:
      type: object
      description: Extended metadata for an image
      properties:
        width:
          type: integer
          description: Image width in pixels
          example: 1200
        height:
          type: integer
          description: Image height in pixels
          example: 630
        mime_type:
          type: string
          description: MIME type of the image
          example: "image/jpeg"
        size:
          type: integer
          description: File size in bytes
          example: 123456
        filename:
          type: string
          description: Original filename
          example: "featured.jpg"
        thumbhash:
          type: string
          description: Compact image preview hash
          example: "1QcSHQRnh493V4dIh4eXh1h4"

    HierarchyResponse:
      type: object
      description: Response containing hierarchical content structure
      properties:
        data:
          type: array
          description: Array of hierarchical nodes
          items:
            $ref: '#/components/schemas/HierarchyNode'
        meta:
          type: object
          description: Metadata about the hierarchy
          properties:
            type:
              type: string
              description: Content type
              example: "doc"
            root:
              type: string
              description: Root path of the hierarchy
              example: "docs/getting-started"
            depth:
              type: integer
              description: Maximum depth of the hierarchy
              example: 3
            total_nodes:
              type: integer
              description: Total number of nodes in the hierarchy
              example: 12

    HierarchyNode:
      type: object
      description: A node in the content hierarchy
      properties:
        id:
          type: integer
          description: Unique identifier for the entry
        title:
          type: string
          description: Node title
          example: "Getting Started"
        slug:
          type: string
          description: URL-friendly identifier
          example: "docs/getting-started"
        meta:
          type: object
          description: Custom metadata for the node
          additionalProperties: true
          example:
            nav_order: 1
            section: "guide"
        children:
          type: array
          description: Child nodes in the hierarchy
          items:
            $ref: '#/components/schemas/HierarchyNode'

    HierarchyInfo:
      type: object
      description: Navigation information about an entry's position in the hierarchy
      properties:
        ancestors:
          type: array
          description: Parent entries up to the root
          items:
            $ref: '#/components/schemas/Entry'
        siblings:
          type: array
          description: Entries at the same level
          items:
            $ref: '#/components/schemas/Entry'
        children:
          type: array
          description: Direct child entries
          items:
            $ref: '#/components/schemas/Entry'
        parent:
          $ref: '#/components/schemas/Entry'
          description: Immediate parent entry

    NavigationInfo:
      type: object
      description: Sequential navigation information
      properties:
        previous:
          $ref: '#/components/schemas/Entry'
          description: Previous entry in sequence
        next:
          $ref: '#/components/schemas/Entry'
          description: Next entry in sequence
        position:
          type: object
          description: Position information
          properties:
            current:
              type: integer
              description: Current position in sequence
              example: 2
            total:
              type: integer
              description: Total number of items in sequence
              example: 5

    WebhookPayload:
      type: object
      description: GitHub webhook payload for repository events
      required:
        - repository
      properties:
        repository:
          type: object
          description: Information about the repository
          required:
            - name
            - full_name
          properties:
            name:
              type: string
              description: Repository name
              example: "docs-content"
            full_name:
              type: string
              description: Full repository name including owner
              example: "flatlayer/docs-content"
            description:
              type: string
              description: Repository description
              example: "Documentation content for Flatlayer"
        ref:
          type: string
          description: The full Git ref that was pushed
          example: "refs/heads/main"
        before:
          type: string
          description: The SHA of the previous HEAD
          example: "6113728f27ae82c7b1a177c8d03f9e96e0adf246"
        after:
          type: string
          description: The SHA of the new HEAD
          example: "0000000000000000000000000000000000000000"
        created:
          type: boolean
          description: Whether this push created the ref
        deleted:
          type: boolean
          description: Whether this push deleted the ref
        forced:
          type: boolean
          description: Whether this push was a force push
        commits:
          type: array
          description: Array of commit objects
          items:
            type: object
            properties:
              id:
                type: string
                description: The commit SHA
                example: "6113728f27ae82c7b1a177c8d03f9e96e0adf246"
              message:
                type: string
                description: The commit message
                example: "Update documentation structure"
              added:
                type: array
                description: Files added in this commit
                items:
                  type: string
                example: [ "docs/getting-started/installation.md" ]
              removed:
                type: array
                description: Files removed in this commit
                items:
                  type: string
                example: [ "docs/old-file.md" ]
              modified:
                type: array
                description: Files modified in this commit
                items:
                  type: string
                example: [ "docs/getting-started/index.md" ]

    Error:
      type: object
      description: Error response
      properties:
        error:
          type: string
          description: Error message
          example: "Entry not found"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
